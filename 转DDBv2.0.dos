// undef all 

// 打印筛选条件
def slectionString(Filters){   // isna 和 isnotna的情况还要改一下  先跳过了
    print('筛选条件：')
    for(filter in Filters){
        if (size(filter[2]) > 1){
            print(filter[0] + ' ' + filter[1] + ' ' + concat(filter[2], ', '))
        }
        else {
            print(filter[0] + ' ' + filter[1] + ' ' + filter[2])
        }
    }
}

// 筛选数据
def selector(df, Filters){    // 改进方向： 里面嵌一层函数
    slectionString(Filters)
    data = df
    // if (isNull(Filters)) return data // 如果过滤条件为空，直接返回数据
    selection = take(true, data.rows())
    for(filter in Filters){
        if (filter[1]=='isin'){
            selection = selection && data[filter[0]] in filter[2]
        }
        else if (filter[1] == 'isna'){
            print(filter[1])
            selection = selection && isNull(data[filter[0]])
        }
        else if (filter[1] == 'isnotna'){
            selection = selection && not isNull(data[filter[0]])
        }
        else if (filter[1] == '=='){
            selection = selection && data[filter[0]] == filter[2] 
        }
        else if (filter[1] == '!='){
            selection = selection && data[filter[0]] != filter[2] 
        }
        else if (filter[1] == '>='){
            selection = selection && data[filter[0]] >= filter[2] 
        }
        else if (filter[1] == '<='){
            selection = selection && data[filter[0]] <= filter[2] 
        }
        else if (filter[1] == '>'){
            selection = selection && data[filter[0]] > filter[2] 
        }
        else if (filter[1] == '<'){
            selection = selection && data[filter[0]] < filter[2] 
        }
        else {
            print('请检查逻辑符号，有效逻辑符号为["==","!=",">=","<=",">","<","isin","isna","isnotna"]')
        }
    }
    return data[selection]
}


// 导入插件
// loadPlugin("/home/vagrant/data/PluginParquet.txt")

// STATIC数据
STATIC = parquet::loadParquet("/home/appadmin/hy/ficc/GuangFa/Results/STATIC.parquet")   // 原本21930行
STATIC.dropColumns!(`B_INFO_ISSUERCODE)

// BONDS数据
BONDS = parquet::loadParquet("/home/appadmin/hy/ficc/GuangFa/Results/BONDS.parquet")
// temp = select * from BONDS where B_ANAL_MATU_CNBD <= 10

BondStaticFilters = [
    ('suffix','isin',['IB','SH','SZ']),     // ANY VECTOR
    ('CATEGORY1','==','信用债'),          
    ('isPerpetualBonds','==',0),     
    ('IS_FAILURE','==',0)
]            
BondDynamicFilters = [('B_ANAL_MATU_CNBD','<=', 10)]

STATIC = selector(df = STATIC, Filters = BondStaticFilters)
// temp = selector(df = STATIC, Filters = [('IS_SUB','isna','')])   // 即使只有一个条件 外面也要有个中括号
BONDS = selector(df = BONDS, Filters = BondDynamicFilters)   


// 合并静态动态数据
df = ej(STATIC, BONDS, `S_INFO_WINDCODE)


// 信用计算利差
FILLED_GUOKAI = parquet::loadParquet("/home/appadmin/hy/ficc/GuangFa/Results/BONDS.parquet")


update FILLED_GUOKAI set B_ANAL_MATU_CNBD = round(B_ANAL_MATU_CNBD, 2)


df = lj(df, FILLED_GUOKAI, `TRADE_DT`B_ANAL_MATU_CNBD)



df = select *, B_ANAL_YIELD_CNBD - B_ANAL_YIELD_GUOKAI as CREDIT_SPREAD from df 



df.columnNames()